({607:function(){var e=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},t=this&&this.__generator||function(e,t){var n,r,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}},n=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],s=0,i=o.length;s<i;s++,a++)r[a]=o[s];return r},r=function(){function r(){}return r.processQueue=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];r.debug("Processing Queue ->",e),"string"==typeof e[0]&&r[e[0]].apply(r,e.slice(1))},r.processOldQueue=function(e){var t=this;e.forEach((function(e){t.processQueue.apply(t,e)}))},r.setCallback=function(e,t){this[e]=t},r.init=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0),this.debug("SDK Initialization");var n=["score","highScore",e,t];if(!this.isLoaded){window.parent.postMessage({controller:"_digitapGame",type:"SDK_SETTINGS",ui:n,ready:!0},"*"),this.listenGameboxEvents(),this.listenStreamrEvents();var r=document.getElementsByTagName("canvas"),a=document.getElementsByTagName("html");setTimeout((function(){var e=r[0].getAttribute("style");r[0].setAttribute("style",e+"width: 100%; margin: 0; padding: 0; user-select: none; -webkit-user-select: none; -moz-user-select: none;");var t=a[0].getAttribute("style");a[0].setAttribute("style",(t||"")+"user-select: none; -webkit-user-select: none; -moz-user-select: none;")}),2e3)}this.isLoaded=!0},r.setProgress=function(e,t,n){this.progress={type:"SDK_PLAYER_SCORE_UPDATE",state:e,score:t,level:n,continueScore:t,controller:"_digitapGame"},this.sendData()},r.setLevelUp=function(e){this.progress.level=e,this.progress.type="SDK_PLAYER_LEVEL_UP",this.sendData()},r.setPlayerFailed=function(e){void 0===e&&(e="FAIL"),this.progress.state=e,this.progress.score=0,this.progress.type="SDK_PLAYER_FAILED",this.sendData()},r.sendData=function(){window.parent.postMessage(this.progress,this.origin)},r.listenGameboxEvents=function(){var e=this;window.addEventListener("message",(function(t){if(e.debug("Event Received -> %o -> %o",t.data,t.origin),"object"==typeof t.data&&t.data.controller&&"_digitapApp"==t.data.controller){var n=e.allowedOrigins.indexOf(t.origin);if(-1===n)return void e.debug("Error: Origin not allowed inside game container!");if(e.origin=e.allowedOrigins[n],t.data.type)switch(t.data.type){case"SDK_START_GAME":e.afterStartGame();break;case"SDK_PAUSE_GAME":e.afterPauseGame();break;case"SDK_START_GAME_FROM_ZERO":e.progress.score=0,e.progress.level=0,e.progress.continueScore=0,e.afterStartGameFromZero();break;case"SDK_CONTINUE_WITH_CURRENT_SCORE":e.progress.score=e.progress.continueScore,e.afterContinueWithCurrentScore(e.progress.score,e.progress.level);break;default:e.debug('Error: `data.type` = "'+t.data.type+'" not found! Please check `readme.md` of data collector package!')}else e.debug("Error: `event.data.type` should be implemented!")}}),!1)},r.listenStreamrEvents=function(){var n=this,r=null,a=null,o=null,s=null,i=null,c=!1,l=!1,u=this;u.debug("Init Streamr v1.0.3"),window.addEventListener("message",(function(d){return e(n,void 0,void 0,(function(){var n,p,g,f,h,v,m,_,E,S,y,b,w,C,D,L,T,R,A,k,O,G,P=this;return t(this,(function(K){switch(K.label){case 0:if(K.trys.push([0,5,,6]),u.debug("Streamr Event received",d.data),!d.data||"object"!=typeof d.data)return[2];if(n=d.data,p=n.controller,g=n.type,f=n.action,h=n.offer,v=n.tournament_id,m=n.username,u.debug("Streamr Event details: ",p,g,f,h,v,m),"_digitapApp"!==p&&"webrtc"!==g)return[2];if(c||(r=document.querySelector("canvas"),a=r.captureStream(30),o=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]}),s=o.createDataChannel("streamr-"+v+"-"+m,{negotiated:!0,id:0})),"close"===f){for(_=0,E=o.getSenders();_<E.length;_++)S=E[_],o.removeTrack(S);return r=null,a=null,s.send(JSON.stringify({type:"streamr",action:"close"})),o.close(),o=null,s=null,i=null,c=!1,l=!1,[2]}if("init"!==f)return[3,4];for(y=0,b=a.getTracks();y<b.length;y++)w=b[y],o.addTrack(w,a);return C=function(e){switch(console.log("__WEBRTC.onConnectionStateChange__",o.connectionState),o.connectionState){case"connected":c=!0,d.source.postMessage({type:"streamr",action:"connected"},d.origin);break;case"disconnected":for(var t=0,n=o.getSenders();t<n.length;t++){var l=n[t];o.removeTrack(l)}r=null,a=null,d.source.postMessage({type:"streamr",action:"disconnected"},d.origin),s.close(),o.close(),o.removeEventListener("connectionstatechange",C),o.removeEventListener("iceconnectionstatechange",D),o.removeEventListener("icecandidate",L),o.removeEventListener("onnegotiationneeded",R),o.removeEventListener("onsignalingstatechange",A),s.removeEventListener("message",T),o=null,s=null,i=null,c=!1}},D=function(e){switch(console.log("__WEBRTC.onICEConnectionStateChange__",o.iceConnectionState),o.iceConnectionState){case"connected":break;case"disconnected":case"failed":o.restartIce()}},L=function(e){try{u.debug("__WEBRTC.onICECandidate__",e.candidate),e.candidate?i=e.candidate:(u.debug("__WEBRTC.localDescription__",o.localDescription),d.source.postMessage({type:"streamr",action:"answer",offer:window.btoa(JSON.stringify(o.localDescription))},d.origin))}catch(e){console.error("__WEBRTC.onICECandidate__",e.message)}},T=function(n){return e(P,void 0,void 0,(function(){var e,r;return t(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),n.data?(e=JSON.parse(n.data)).iceCandidate?[4,o.addIceCandidate(e.iceCandidate)]:[3,2]:[2];case 1:t.sent(),s.send(JSON.stringify({iceCandidate:i})),t.label=2;case 2:return[3,4];case 3:return r=t.sent(),console.error("__WEBRTC.onMessage__",r.message),[3,4];case 4:return[2]}}))}))},R=function(n){return e(P,void 0,void 0,(function(){var e,n,r;return t(this,(function(t){switch(t.label){case 0:return t.trys.push([0,4,,5]),l?[2]:[4,o.setRemoteDescription(JSON.parse(h))];case 1:return t.sent(),n=(e=o).setLocalDescription,[4,o.createAnswer()];case 2:return[4,n.apply(e,[t.sent()])];case 3:return t.sent(),[3,5];case 4:return r=t.sent(),console.error("__WEBRTC.onNegotiationNeeded",r.message),[3,5];case 5:return[2]}}))}))},A=function(e){return l="stable"!==o.signalingState},o.addEventListener("connectionstatechange",C),o.addEventListener("iceconnectionstatechange",D),o.addEventListener("icecandidate",L),o.addEventListener("onnegotiationneeded",R),o.addEventListener("onsignalingstatechange",A),s.addEventListener("message",T),[4,o.setRemoteDescription(JSON.parse(h))];case 1:return K.sent(),O=(k=o).setLocalDescription,[4,o.createAnswer()];case 2:return[4,O.apply(k,[K.sent()])];case 3:K.sent(),K.label=4;case 4:return[3,6];case 5:return G=K.sent(),console.error("__WEBRTC__",G.message),[3,6];case 6:return[2]}}))}))}))},r.afterStartGameFromZero=function(){},r.afterContinueWithCurrentScore=function(e,t){},r.afterStartGame=function(){},r.afterPauseGame=function(){},r.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var a=window;a.sdkdebug&&console.log.apply(console,n(["DigitapGamePlayerSDK -> "+e],t))},r.gameObject=null,r.isLoaded=!1,r.origin=null,r.isDebugging=!1,r.allowedOrigins=["https://build.digitap.dev","https://wam.app","https://app.wam.app","https://wam.eu","https://play.wam.app","https://stage.wam.app","http://localhost:63342","http://localhost:8080","http://localhost:3000","http://localhost:3001","https://localhost:3001","http://127.0.0.1:3001","https://127.0.0.1:3001"],r.progress={controller:"_digitapGame",type:"SDK_PLAYER_SCORE_UPDATE",score:0,level:0,state:null,continueScore:0},r}();if(void 0!==window.digitapSDK){var a=window.digitapSDK.q;r.processOldQueue(a)}window.digitapSDK=r.processQueue,window.console.log,window.console.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return!0}}})[607]();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,