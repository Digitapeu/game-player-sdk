({607:function(){var e=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function i(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}c((r=r.apply(e,t||[])).next())}))},t=this&&this.__generator||function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}},n=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var s=arguments[t],o=0,i=s.length;o<i;o++,a++)r[a]=s[o];return r},r=function(){function r(){}return r.processQueue=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];r.debug("Processing Queue ->",e),"string"==typeof e[0]&&r[e[0]].apply(r,e.slice(1))},r.processOldQueue=function(e){var t=this;e.forEach((function(e){t.processQueue.apply(t,e)}))},r.setCallback=function(e,t){this[e]=t},r.init=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0),this.debug("SDK Initialization");var n=["score","highScore",e,t];if(!this.isLoaded){window.parent.postMessage({controller:"_digitapGame",type:"SDK_SETTINGS",ui:n,ready:!0},"*"),this.listenGameboxEvents(),this.listenStreamrEvents();var r=document.getElementsByTagName("canvas"),a=document.getElementsByTagName("html");setTimeout((function(){var e=r[0].getAttribute("style");r[0].setAttribute("style",e+"width: 100%; margin: 0; padding: 0; user-select: none; -webkit-user-select: none; -moz-user-select: none;");var t=a[0].getAttribute("style");a[0].setAttribute("style",(t||"")+"user-select: none; -webkit-user-select: none; -moz-user-select: none;")}),2e3)}this.isLoaded=!0},r.setProgress=function(e,t,n){this.progress={type:"SDK_PLAYER_SCORE_UPDATE",state:e,score:t,level:n,continueScore:t,controller:"_digitapGame"},this.sendData()},r.setLevelUp=function(e){this.progress.level=e,this.progress.type="SDK_PLAYER_LEVEL_UP",this.sendData()},r.setPlayerFailed=function(e){void 0===e&&(e="FAIL"),this.progress.state=e,this.progress.score=0,this.progress.type="SDK_PLAYER_FAILED",this.sendData()},r.sendData=function(){window.parent.postMessage(this.progress,this.origin)},r.listenGameboxEvents=function(){var e=this;window.addEventListener("message",(function(t){if(r.debug("Event Received -> %o -> %o",t.data,t.origin),"object"==typeof t.data&&t.data.controller&&"_digitapApp"==t.data.controller){var n=e.allowedOrigins.indexOf(t.origin);if(-1===n)return void r.debug("Error: Origin not allowed inside game container!");if(e.origin=e.allowedOrigins[n],t.data.type)switch(t.data.type){case"SDK_START_GAME":e.afterStartGame();break;case"SDK_PAUSE_GAME":e.afterPauseGame();break;case"SDK_START_GAME_FROM_ZERO":e.progress.score=0,e.progress.level=0,e.progress.continueScore=0,e.afterStartGameFromZero();break;case"SDK_CONTINUE_WITH_CURRENT_SCORE":e.progress.score=e.progress.continueScore,e.afterContinueWithCurrentScore(e.progress.score,e.progress.level);break;default:r.debug('Error: `data.type` = "'+t.data.type+'" not found! Please check `readme.md` of data collector package!')}else r.debug("Error: `event.data.type` should be implemented!")}}),!1)},r.listenStreamrEvents=function(){var n=this,a=null,s=null,o=null,i=null,c=null,l=!1,u=!1,d=this;d.debug("Init Streamr v1.0.11"),window.addEventListener("message",(function(p){return e(n,void 0,void 0,(function(){var n,g,f,h,v,m,S,_,b,E,y,w,C,D,L,T,R,A,O,k,P,G,K=this;return t(this,(function(N){switch(N.label){case 0:if(N.trys.push([0,5,,6]),r.debug("Streamr Event received",p.data),!p.data||"object"!=typeof p.data)return[2];if(n=p.data,g=n.controller,f=n.type,h=n.action,v=n.offer,m=n.tournament_id,S=n.username,r.debug("Streamr Event details: ",g,f,h,v,m,S),"_digitapApp"!==g||"webrtc"!==f)return[2];if(r.debug("Streamr –> Passed validation"),l||(a=document.querySelector("canvas"),s=a.captureStream(30),o=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]}),i=o.createDataChannel("streamr-"+m+"-"+S,{negotiated:!0,id:0})),"close"===h){for(_=0,b=o.getSenders();_<b.length;_++)E=b[_],o.removeTrack(E);return a=null,s=null,i.send(JSON.stringify({type:"streamr",action:"close"})),o.close(),o=null,i=null,c=null,l=!1,u=!1,[2]}if("init"!==h)return[3,4];for(y=0,w=s.getTracks();y<w.length;y++)C=w[y],o.addTrack(C,s);return D=function(e){switch(d.debug("Streamr –> __WEBRTC.onConnectionStateChange__",o.connectionState),o.connectionState){case"connected":l=!0,p.source.postMessage({type:"streamr",action:"connected"},p.origin);break;case"disconnected":for(var t=0,n=o.getSenders();t<n.length;t++){var r=n[t];o.removeTrack(r)}a=null,s=null,p.source.postMessage({type:"streamr",action:"disconnected"},p.origin),i.close(),o.close(),o.removeEventListener("connectionstatechange",D),o.removeEventListener("iceconnectionstatechange",L),o.removeEventListener("icecandidate",T),o.removeEventListener("onnegotiationneeded",A),o.removeEventListener("onsignalingstatechange",O),i.removeEventListener("message",R),o=null,i=null,c=null,l=!1}},L=function(e){switch(d.debug("Streamr –> __WEBRTC.onICEConnectionStateChange__",o.iceConnectionState),o.iceConnectionState){case"connected":break;case"disconnected":case"failed":o.restartIce()}},T=function(e){try{d.debug("Streamr –> __WEBRTC.onICECandidate__",e.candidate),e.candidate?c=e.candidate:(d.debug("Streamr –> __WEBRTC.localDescription__",o.localDescription),p.source.postMessage({type:"streamr",action:"answer",offer:window.btoa(JSON.stringify(o.localDescription))},p.origin))}catch(e){console.error("Streamr –> __WEBRTC.onICECandidate__",e.message)}},R=function(n){return e(K,void 0,void 0,(function(){var e,r;return t(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),n.data?(e=JSON.parse(n.data)).iceCandidate?[4,o.addIceCandidate(e.iceCandidate)]:[3,2]:[2];case 1:t.sent(),i.send(JSON.stringify({iceCandidate:c})),t.label=2;case 2:return[3,4];case 3:return r=t.sent(),console.error("Streamr –> __WEBRTC.onMessage__",r.message),[3,4];case 4:return[2]}}))}))},A=function(n){return e(K,void 0,void 0,(function(){var e,n,r;return t(this,(function(t){switch(t.label){case 0:return t.trys.push([0,4,,5]),u?[2]:[4,o.setRemoteDescription(JSON.parse(v))];case 1:return t.sent(),n=(e=o).setLocalDescription,[4,o.createAnswer()];case 2:return[4,n.apply(e,[t.sent()])];case 3:return t.sent(),[3,5];case 4:return r=t.sent(),console.error("Streamr –> __WEBRTC.onNegotiationNeeded",r.message),[3,5];case 5:return[2]}}))}))},O=function(e){return u="stable"!==o.signalingState},o.addEventListener("connectionstatechange",D),o.addEventListener("iceconnectionstatechange",L),o.addEventListener("icecandidate",T),o.addEventListener("onnegotiationneeded",A),o.addEventListener("onsignalingstatechange",O),i.addEventListener("message",R),[4,o.setRemoteDescription(JSON.parse(v))];case 1:return N.sent(),P=(k=o).setLocalDescription,[4,o.createAnswer()];case 2:return[4,P.apply(k,[N.sent()])];case 3:N.sent(),N.label=4;case 4:return[3,6];case 5:return G=N.sent(),d.debug("Streamr -> __WEBRTC__",G.message),[3,6];case 6:return[2]}}))}))}))},r.afterStartGameFromZero=function(){},r.afterContinueWithCurrentScore=function(e,t){},r.afterStartGame=function(){},r.afterPauseGame=function(){},r.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];window,console.log.apply(console,n(["DigitapGamePlayerSDK -> "+e],t))},r.gameObject=null,r.isLoaded=!1,r.origin=null,r.isDebugging=!1,r.allowedOrigins=["https://build.digitap.dev","https://wam.app","https://app.wam.app","https://wam.eu","https://play.wam.app","https://stage.wam.app","http://localhost:63342","http://localhost:8080","http://localhost:3000","http://localhost:3001","https://localhost:3001","http://127.0.0.1:3001","https://127.0.0.1:3001"],r.progress={controller:"_digitapGame",type:"SDK_PLAYER_SCORE_UPDATE",score:0,level:0,state:null,continueScore:0},r}();if(void 0!==window.digitapSDK){var a=window.digitapSDK.q;r.processOldQueue(a)}window.digitapSDK=r.processQueue}})[607]();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,