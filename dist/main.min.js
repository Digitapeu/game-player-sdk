({607:function(){var e=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{l(n.next(e))}catch(e){a(e)}}function s(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}l((n=n.apply(e,t||[])).next())}))},t=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},r=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var a=arguments[t],i=0,s=a.length;i<s;i++,o++)n[o]=a[i];return n},n=function(){function n(){}return n.processQueue=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];n.debug("Processing Queue ->",e),"string"==typeof e[0]&&n[e[0]].apply(n,e.slice(1))},n.processOldQueue=function(e){var t=this;e.forEach((function(e){t.processQueue.apply(t,e)}))},n.setCallback=function(e,t){this[e]=t},n.init=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0),this.debug("SDK Initialization");var r=["score","highScore",e,t];if(!this.isLoaded){window.parent.postMessage({controller:"_digitapGame",type:"SDK_SETTINGS",ui:r,ready:!0},"*"),this.listenGameboxEvents();var n=document.getElementsByTagName("canvas"),o=document.getElementsByTagName("html");setTimeout((function(){var e=n[0].getAttribute("style");n[0].setAttribute("style",e+"width: 100%; margin: 0; padding: 0; user-select: none; -webkit-user-select: none; -moz-user-select: none;");var t=o[0].getAttribute("style");o[0].setAttribute("style",(t||"")+"user-select: none; -webkit-user-select: none; -moz-user-select: none;")}),2e3)}this.isLoaded=!0},n.setProgress=function(e,t,r){this.progress={type:"SDK_PLAYER_SCORE_UPDATE",state:e,score:t,level:r,continueScore:t,controller:"_digitapGame"},this.sendData()},n.setLevelUp=function(e){this.progress.level=e,this.progress.type="SDK_PLAYER_LEVEL_UP",this.sendData()},n.setPlayerFailed=function(e){void 0===e&&(e="FAIL"),this.progress.state=e,this.progress.score=0,this.progress.type="SDK_PLAYER_FAILED",this.sendData()},n.sendData=function(){window.parent.postMessage(this.progress,this.origin)},n.listenGameboxEvents=function(){var e=this;window.addEventListener("message",(function(t){if(e.debug("Event Received -> %o -> %o",t.data,t.origin),"object"==typeof t.data&&t.data.controller&&"_digitapApp"==t.data.controller){var r=e.allowedOrigins.indexOf(t.origin);if(-1===r)return void e.debug("Error: Origin not allowed inside game container!");if(e.origin=e.allowedOrigins[r],t.data.type)switch(t.data.type){case"SDK_START_GAME":e.afterStartGame();break;case"SDK_PAUSE_GAME":e.afterPauseGame();break;case"SDK_START_GAME_FROM_ZERO":e.progress.score=0,e.progress.level=0,e.progress.continueScore=0,e.afterStartGameFromZero();break;case"SDK_CONTINUE_WITH_CURRENT_SCORE":e.progress.score=e.progress.continueScore,e.afterContinueWithCurrentScore(e.progress.score,e.progress.level);break;default:e.debug('Error: `data.type` = "'+t.data.type+'" not found! Please check `readme.md` of data collector package!')}else e.debug("Error: `event.data.type` should be implemented!")}}),!1)},n.listenStreamrEvents=function(){var r=this,n=this;n.debug("Init Streamr v1.0.4"),window.addEventListener("message",(function(o){return e(r,void 0,void 0,(function(){var e,r,a,i,s,l,c;return t(this,(function(t){try{if(n.debug("Streamr Event received",o.data),!o.data||"object"!=typeof o.data)return[2];if(e=o.data,r=e.controller,a=e.type,i=e.action,s=e.offer,l=e.tournament_id,c=e.username,n.debug("Streamr Event details: ",r,a,i,s,l,c),"_digitapApp"!==r&&"webrtc"!==a)return[2]}catch(e){n.debug("__WEBRTC__",e.message)}return[2]}))}))}))},n.afterStartGameFromZero=function(){},n.afterContinueWithCurrentScore=function(e,t){},n.afterStartGame=function(){},n.afterPauseGame=function(){},n.debug=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=window;o.sdkdebug&&console.log.apply(console,r(["DigitapGamePlayerSDK -> "+e],t))},n.gameObject=null,n.isLoaded=!1,n.origin=null,n.isDebugging=!1,n.allowedOrigins=["https://build.digitap.dev","https://wam.app","https://app.wam.app","https://wam.eu","https://play.wam.app","https://stage.wam.app","http://localhost:63342","http://localhost:8080","http://localhost:3000","http://localhost:3001","https://localhost:3001","http://127.0.0.1:3001","https://127.0.0.1:3001"],n.progress={controller:"_digitapGame",type:"SDK_PLAYER_SCORE_UPDATE",score:0,level:0,state:null,continueScore:0},n}();if(void 0!==window.digitapSDK){var o=window.digitapSDK.q;n.processOldQueue(o)}window.digitapSDK=n.processQueue,window.console.log,window.console.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return!0}}})[607]();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,