var _digitapSDK;_digitapSDK=(()=>{"use strict";var e={607:(e,t,r)=>{r.d(t,{DigitapGamePlayerSDK:()=>o});var a=function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var a=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],s=0,n=i.length;s<n;s++,o++)a[o]=i[s];return a},o=function(){function e(){}return e.init=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0),this.debug("SDK Initialization");var r=["score","highScore",e,t];this.isLoaded||(window.parent.postMessage({controller:"_digitapGame",type:"SDK_SETTINGS",ui:r,ready:!0},"*"),this.listenGameboxEvents()),this.isLoaded=!0},e.setProgress=function(e,t,r){this.progress={type:"SDK_PLAYER_SCORE_UPDATE",state:e,score:t,level:r,continueScore:t,controller:"_digitapGame"},this.sendData()},e.setLevelUp=function(e){this.progress.level=e,this.progress.type="SDK_PLAYER_LEVEL_UP",this.sendData()},e.setPlayerFailed=function(e){void 0===e&&(e="FAIL"),this.progress.state=e,this.progress.score=0,this.progress.type="SDK_PLAYER_FAILED",this.sendData()},e.sendData=function(){window.parent.postMessage(this.progress,this.origin)},e.listenGameboxEvents=function(){var e=this;window.addEventListener("message",(function(t){if(e.debug("Event Received -> %s -> %s",JSON.stringify(t.data),JSON.stringify(t.origin)),"object"==typeof t.data&&t.data.controller&&"_digitapApp"==t.data.controller){var r=e.allowedOrigins.indexOf(t.origin);if(-1===r)return void e.debug("Error: Origin not allowed inside game container!");if(e.origin=e.allowedOrigins[r],t.data.type)switch(t.data.type){case"SDK_START_GAME":e._afterStartGame();break;case"SDK_PAUSE_GAME":e._afterPauseGame();break;case"SDK_START_GAME_FROM_ZERO":e.progress.score=0,e.progress.level=0,e.progress.continueScore=0,e._afterStartGameFromZero();break;case"SDK_CONTINUE_WITH_CURRENT_SCORE":e.progress.score=e.progress.continueScore,e._afterContinueWithCurrentScore(e.progress.score);break;default:e.debug('Error: `data.type` = "'+t.data.type+'" not found! Please check `readme.md` of data collector package!')}else e.debug("Error: `event.data.type` should be implemented!")}}),!1)},e._afterStartGameFromZero=function(){},e._afterContinueWithCurrentScore=function(e){},e._afterStartGame=function(){},e._afterPauseGame=function(){},e.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.isDebugging||console.log.apply(console,a(["DigitapGamePlayerSDK -> "+e],t))},e.setDebugging=function(){this.isDebugging=!0},e.gameObject=null,e.isLoaded=!1,e.origin=null,e.isDebugging=!1,e.allowedOrigins=["https://build.digitap.dev","https://wam.app","https://app.wam.app","https://wam.eu","http://localhost:63342","http://localhost:8080","http://localhost:3000"],e.progress={controller:"_digitapGame",type:"SDK_PLAYER_SCORE_UPDATE",score:0,level:0,state:null,continueScore:0},e}()}},t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}return r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(607)})().DigitapGamePlayerSDK;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,